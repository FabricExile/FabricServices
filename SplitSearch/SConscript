#
# Copyright (c) 2010-2016, Fabric Software Inc. All rights reserved.
#

Import(
  'parentEnv',
  'llvmFlags',
  'stageDir',
  )

libName = 'FabricSplitSearch'

env = parentEnv.Clone()
binDir = stageDir.Dir('bin')
libDir = stageDir.Dir('lib')

env.Append(CPPDEFINES = ['FABRICSERVICES_SPLITSEARCH_BUILDING'])
if env['FABRIC_BUILD_OS'] != 'Windows':
  env.Append(CXXFLAGS=['-std=c++11'])
if env['FABRIC_BUILD_OS'] == 'Darwin':
  env.Append(CXXFLAGS=['-stdlib=libc++'])
  env.Append(CXXFLAGS = ['-fvisibility=hidden'])
  env.Append(LINKFLAGS = ['-stdlib=libc++'])

env.MergeFlags(llvmFlags)

majMinVer = '.'.join([env['FABRIC_VERSION_MAJ'], env['FABRIC_VERSION_MIN']])
majMinRevVer = '.'.join([env['FABRIC_VERSION_MAJ'], env['FABRIC_VERSION_MIN'], env['FABRIC_VERSION_REV']])

if env['FABRIC_BUILD_OS'] == 'Darwin':
  env.Append(SHLINKFLAGS = ','.join([
    '-Wl',
    '-current_version',
    majMinRevVer,
    '-compatibility_version',
    majMinVer,
    '-install_name',
    '@rpath/lib/' + '.'.join(['lib' + libName, majMinVer, 'dylib'])
    ]))
if env['FABRIC_BUILD_OS'] == 'Linux':
  env.Append(SHLINKFLAGS = ','.join([
    '-Wl',
    '-soname',
    '.'.join(['lib' + libName, 'so', majMinVer])
    ]))
  env.Append(SHLINKFLAGS = Literal(','.join([
    '-Wl',
    '-rpath',
    '$ORIGIN',
    ])))

sources = Glob('*.cpp')

if env['FABRIC_BUILD_OS'] == 'Windows':
  basename = '.'.join([libName, 'dll'])
if env['FABRIC_BUILD_OS'] == 'Linux':
  basename = '.'.join(['lib' + libName, 'so', majMinRevVer])
if env['FABRIC_BUILD_OS'] == 'Darwin':
  basename = '.'.join(['lib' + libName, majMinRevVer, 'dylib'])

splitSearchLib = env.SharedLibrary(libDir.File(basename), sources)
if env['FABRIC_BUILD_OS'] == 'Windows':
  splitSearchLib = env.Install(binDir, splitSearchLib[:2])
if env['FABRIC_BUILD_OS'] == 'Linux':
  env.AddPostAction(
    splitSearchLib,
    [
      [
        'ln', '-snf',
        '.'.join(['lib' + libName, 'so', majMinRevVer]),
        libDir.File('.'.join(['lib' + libName, 'so', majMinVer])),
        ],
      [
        'ln', '-snf',
        '.'.join(['lib' + libName, 'so', majMinVer]),
        libDir.File('.'.join(['lib' + libName, 'so'])),
        ]
      ]
    )
if env['FABRIC_BUILD_OS'] == 'Darwin':
  env.AddPostAction(splitSearchLib, [[
    'ln', '-snf',
    '.'.join(['lib' + libName, majMinRevVer, 'dylib']),
    libDir.File('.'.join(['lib' + libName, majMinVer, 'dylib'])),
    ]])
  env.AddPostAction(splitSearchLib, [[
    'ln', '-snf',
    '.'.join(['lib' + libName, majMinVer, 'dylib']),
    libDir.File('.'.join(['lib' + libName, 'dylib'])),
    ]])

splitSearchIncludeDir = env.Dir('.').dir.srcnode()

splitSearchFlags = {
  'CPPPATH': [splitSearchIncludeDir],
  'LIBPATH': [libDir],
  'LIBS': ['FabricSplitSearch'],
  }

splitSearchHeaders = env.Install(stageDir.Dir('include').Dir('FabricServices').Dir('SplitSearch'), Glob('*.hpp'))

splitSearchFiles = splitSearchLib + splitSearchHeaders
Export('splitSearchLib', 'splitSearchIncludeDir', 'splitSearchFlags', 'splitSearchFiles')
Alias('splitSearch', splitSearchFiles)
Return('splitSearchLib')
